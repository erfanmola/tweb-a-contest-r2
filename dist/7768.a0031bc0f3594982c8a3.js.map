{"version":3,"file":"7768.a0031bc0f3594982c8a3.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  PAID_SEND_DELAY, RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params : SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n  || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'ToastTitleMessageSent' };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || (messagesCount === 1 ? { key: 'ToastTitleMessageSent' }\n    : { key: 'ToastTitleMessagesSent', variables: { count: messagesCount } });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: { key: 'ToastMessageSent', variables: { amount: starsForOneMessage * messagesCount } },\n    actionText: { key: 'ButtonUndo' },\n    action: {\n      action: 'deleteMessages',\n      payload: { messageList: firstSendParam.messageList, messageIds: messageIdsForUndo, shouldDeleteForAll: true },\n    },\n    dismissAction: {\n      action: 'sendMessages',\n      payload: {\n        sendParams,\n      },\n    },\n    duration: PAID_SEND_DELAY,\n    shouldShowTimer: true,\n    disableClickDismiss: true,\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { peer, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId, isMedia, isFullscreen } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    peer, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { peer, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, peerId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload!;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('addNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('addNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL, PAID_SEND_DELAY } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'ToastTitleMessageSent' },\n    message: { key: 'ToastMessageSent', variables: { amount: starsForOneMessage } },\n    actionText: { key: 'ButtonUndo' },\n    dismissAction: {\n      action: 'sendInlineBotApiResult',\n      payload: params,\n    },\n    duration: PAID_SEND_DELAY,\n    shouldShowTimer: true,\n    disableClickDismiss: true,\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n      },\n    },\n  };\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedPosition: position,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedSize: size,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment, selectTabState } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftMainMenu from './LeftMainMenu';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n  hasFolders: boolean;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  hasFolders,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        {(isMobile || !(hasFolders)) && (\n          <LeftMainMenu\n            content={content}\n            onReset={onReset}\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            shouldHideSearch={shouldHideSearch}\n            shouldSkipTransition={shouldSkipTransition}\n          />\n        )}\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n  hasFolders: boolean;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n  hasFolders,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n        hasFolders={hasFolders}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftColumnBar from './LeftColumnBar';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  hasFolders: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  hasFolders,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n    closeForumPanel,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          setSettingsScreen(SettingsScreens.PrivacyMessages);\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  const { isMobile } = useAppLayout();\n\n  const handleSelectSettings = useLastCallback(() => {\n    setContent(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    setContent(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    setContent(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            hasFolders={hasFolders}\n          />\n        );\n    }\n  }\n\n  return (\n    <div id=\"LeftColumn-container\">\n      {(!isMobile && hasFolders) && (\n        <LeftColumnBar\n          onSelectSettings={handleSelectSettings}\n          onSelectContacts={handleSelectContacts}\n          onSelectArchived={handleSelectArchived}\n          shouldHideSearch={isForumPanelOpen}\n          onReset={handleReset}\n          shouldSkipTransition={shouldSkipHistoryAnimations}\n          content={content}\n          foldersDispatch={foldersDispatch}\n          setContent={setContent}\n        />\n      )}\n\n      <Transition\n        ref={ref}\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n        shouldWrap\n        wrapExceptionKey={ContentType.Main}\n        id=\"LeftColumn\"\n        withSwipeControl\n      >\n        {renderContent}\n      </Transition>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      chatFolders: {\n        byId,\n      },\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      hasFolders: Object.keys(byId).length > 0,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  isInMessageList,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>{lang('UserUpdatedName', {\n        user: chat.title,\n        time: formatPastDatetime(lang, nameChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>{lang('UserUpdatedPhoto', {\n        user: chat.title,\n        time: formatPastDatetime(lang, photoChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  const isEmptyOrLoading = (isBotInfoEmpty && isChatInfoEmpty) || isLoadingFullUser;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isEmptyOrLoading && isInMessageList,\n    withShouldRender: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && <span>{oldLang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ peerId: chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, peerId: chatId });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, peerId: chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    openAboutAdsModal({ chatId });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={message!}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>{\n            message.isOutgoing\n              ? lang('ActionPaidOneMessageOutgoing', {\n                amount,\n              })\n              : (() => {\n                const sender = selectSender(getGlobal(), message);\n                const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                return lang('ActionPaidOneMessageIncoming', {\n                  user: userTitle,\n                  amount,\n                });\n              })()\n          }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{oldLang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n            && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo isInMessageList key={`account_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  userId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction RequirementToContactMessage({ patternColor, userName, paidMessagesStars }: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => { openStarsBalanceModal({}); });\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang('FirstMessageInPaidMessagesChat', {\n                user: userName,\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', userName), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && isPrivate && !hasMessages ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} userId={chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage userId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredMessageContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    clickSponsoredMessage,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsoredMessage({ peerId: chatId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    openAboutAdsModal({ chatId });\n  });\n\n  useEffect(() => {\n    if (shouldRender && sponsoredMessage) {\n      viewSponsoredMessage({ peerId: chatId });\n    }\n  }, [shouldRender, sponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={renderingSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatBackground from './ChatBackground';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      {/* <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      /> */}\n      <ChatBackground\n        className={bgClassName}\n        customBackgroundValue={customBackgroundValue}\n        backgroundColorValue={backgroundColor}\n        isBackgroundBlurred={isBackgroundBlurred}\n        patternColorValue={patternColor}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor: !customBackground ? backgroundColor : undefined,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'preparedMessageModal' |\n'sharePreparedMessageModal' |\n'giftStatusInfoModal' |\n'giftTransferModal' |\n'chatRefundModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const oldLang = useOldLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {totalIssued && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(totalIssued))}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadPasswordInfo();\n      loadUserCollectibleStatuses();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n\n      loadAttachBots();\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","titleKey","variables","amount","shouldDeleteForAll","dismissAction","duration","PAID_SEND_DELAY","shouldShowTimer","disableClickDismiss","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","byKey","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","addTabStateResetterAction","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","getTranslationFn","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","Transition","activeKey","StatusPickerMenu","withGlobal","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ref","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","hasFolders","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","lockScreen","oldLang","useLang","areContactsVisible","LeftColumnContent","Contacts","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useLastCallback","stopPropagation","useHotkeys","IS_APP","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","LeftMainMenu","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","foldersDispatch","isForumPanelOpen","onContentChange","onSettingsScreenSelect","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","ChatList","isForumPanelVisible","shouldRender","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","renderCount","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","shouldHideFolderTabs","onLeftColumnContentChange","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","shouldSkipHistoryAnimations","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","isChatList","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","IS_MAC_OS","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","selectorToPreventScroll","onSwipeRightStart","onCancel","renderContent","isStoryRibbonShown","currentScreen","onScreenSelect","isChannel","LeftColumnBar","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","useHistoryBack","createLocationHash","onBack","_extends","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","isInMessageList","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","handleClick","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","pluralValue","AvatarList","isEmptyOrLoading","isFirstRenderRef","useShowTransition","withShouldRender","useEffectOnce","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","children","appearanceOrder","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","handleAvatarClick","avatarRef","hiddenName","Avatar","renderAvatar","SponsoredMessageContextMenuContainer","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","contextMenuAnchor","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","renderTextWithEntities","isRectangular","MessageAppendix","canReport","anchor","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","top","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaHash","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","transitionRef","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","DropdownMenu","forceOpen","trigger","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","useDerivedState","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","shiftKey","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","label","checked","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","noMountTransition","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","onDoubleClick","ChatBackground","backgroundColorValue","patternColorValue","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","shouldPlay","play","canManage","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","totalIssued","getTotalGiftAvailability","AnimatedIconFromSticker","noLoop","nonInteractive","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","shouldWarnAboutSvg","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","isSavedMessages","tabs","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","activeTab","setActiveTab","handleSwitchTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","captureEvents","onSwipe","SwipeDirection","Left","Right","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","folderType","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","avatarSize","TabList","onSwitchTab","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","onTrigger","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","MenuSeparator","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","total","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","useFullscreenStatus","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}